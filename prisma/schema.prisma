// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  firstName     String   @map("first_name")
  lastName      String   @map("last_name")
  phone         String?
  password      String?
  role          String   @default("customer")
  avatarUrl     String?  @map("avatar_url")
  emailVerified Boolean  @default(false) @map("email_verified")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  accounts      Account[]
  sessions      Session[]
  cartItems     CartItem[]
  orders        Order[]
  addresses     Address[]
  wishlistItems WishlistItem[]

  @@map("users")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  imageUrl    String?  @map("image_url")
  parentId    String?  @map("parent_id")
  isActive    Boolean  @default(true) @map("is_active")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

model Brand {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logoUrl     String?  @map("logo_url")
  websiteUrl  String?  @map("website_url")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  products    Product[]

  @@map("brands")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  imageUrl    String?  @map("image_url")
  categoryId  String?  @map("category_id")
  brandId     String?  @map("brand_id")
  stock       Int      @default(0)
  isFeatured  Boolean  @default(false) @map("is_featured")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  category    Category?      @relation(fields: [categoryId], references: [id])
  brand       Brand?         @relation(fields: [brandId], references: [id])
  cartItems   CartItem[]
  orderItems  OrderItem[]
  wishlistItems WishlistItem[]

  @@map("products")
}

// Modelos simplificados - removidos para el portafolio

model CartItem {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  productId String   @map("product_id")
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id              String    @id @default(cuid())
  userId          String?   @map("user_id")
  orderNumber     String    @unique @map("order_number")
  status          String    @default("pending")
  paymentStatus   String    @default("pending") @map("payment_status")
  paymentMethod   String?   @map("payment_method")
  paymentIntentId String?   @map("payment_intent_id")
  subtotal        Decimal   @db.Decimal(10, 2)
  taxAmount       Decimal   @default(0) @db.Decimal(10, 2) @map("tax_amount")
  shippingAmount  Decimal   @default(0) @db.Decimal(10, 2) @map("shipping_amount")
  discountAmount  Decimal   @default(0) @db.Decimal(10, 2) @map("discount_amount")
  totalAmount     Decimal   @db.Decimal(10, 2) @map("total_amount")
  currency        String    @default("USD")
  notes           String?
  shippedAt       DateTime? @map("shipped_at")
  deliveredAt     DateTime? @map("delivered_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  user            User?       @relation(fields: [userId], references: [id])
  items           OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String   @map("order_id")
  productId   String   @map("product_id")
  productName String   @map("product_name")
  productSku  String   @map("product_sku")
  quantity    Int
  unitPrice   Decimal  @db.Decimal(10, 2) @map("unit_price")
  totalPrice  Decimal  @db.Decimal(10, 2) @map("total_price")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Address {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  type         String   // 'shipping' or 'billing'
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  company      String?
  addressLine1 String   @map("address_line_1")
  addressLine2 String?  @map("address_line_2")
  city         String
  state        String
  postalCode   String   @map("postal_code")
  country      String   @default("US")
  phone        String?
  isDefault    Boolean  @default(false) @map("is_default")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  productId String   @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}
